name: Publish Mod

env:
  MOD_NAME: ExampleUI

on:
  push:
    tags:
      - 'v*'

jobs:
  publish:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v2
      name: Checkout
      with:
        submodules: true
        lfs: true

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1

    - name: Get Tag Version
      id: get_tag_version
      run: |
        echo "${env:GITHUB_REF}"
        $tag = ${env:GITHUB_REF} -replace "refs/tags/" -replace ""
        $version = ${env:GITHUB_REF} -replace "refs/tags/v" -replace ""
        echo "::set-output name=TAG::$tag"
        echo "::set-output name=VERSION::$version"

    # Get release that was created for this tag
    - name: Get Release
      uses: octokit/request-action@v2.x
      id: get_release
      with:
        route: GET /repos/:repository/releases/tags/${{ steps.get_tag_version.outputs.TAG }}
        repository: ${{ github.repository }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Get Release Upload URL
      id: get_upload_url
      run: |
        $url = ${env:response} | jq -r '.upload_url'
        echo ${env:response}
        echo $url
        echo "::set-output name=UPLOAD_URL::$url"
      env:
        response: ${{ steps.get_release.outputs.data }}

    - name: Get Release Body
      id: get_upload_body
      run: |
        $body = ${env:response} | jq -r '.body'
        echo ${env:response}
        echo $body
        echo "::set-output name=BODY::$body"
      env:
        response: ${{ steps.get_release.outputs.data }}

    - name: Set NuGet Package Version And Description
      run: |
        [xml] $doc = Get-Content("./ULTRAINTERFACE/Package/ULTRAINTERFACE.nuspec")

        foreach ($childNode in $doc.package.metadata.ChildNodes) {
          if ($childNode.Name -eq "version") {
            $childNode.InnerText = "${{ steps.get_tag_version.outputs.VERSION }}"
          }
          if ($childNode.Name -eq "releaseNotes") {
            $childNode.InnerText = ("${{ steps.get_upload_body.outputs.BODY }}" -replace "\\r\\n","`n")
          }
        }

        $doc.Save((Resolve-Path "./ULTRAINTERFACE/Package/ULTRAINTERFACE.nuspec")) | Out-Null

    - name: Configure ExampleUI To Use This New Version
      run: |
        [xml] $doc = Get-Content("./ExampleUI/ExampleUI.csproj")

        foreach ($projectChild in $doc.Project.ChildNodes) {
          foreach ($packageReference in $projectChild.PackageReference) {
            if ($packageReference.GetAttribute("Include") -ne "ULTRAINTERFACE") { continue }

            $packageReference.SetAttribute("Version", "${{ steps.get_tag_version.outputs.VERSION }}")
          }
        }

        $doc.Save((Resolve-Path "./ExampleUI/ExampleUI.csproj")) | Out-Null

    - name: Configure commit
      run: |
        git config user.name "Github Actions"
        git config user.email "<>"

    - name: Commit Edit Version
      continue-on-error: true
      run: |
        git add .
        git commit --allow-empty -m "Setup Release Branch"

    # Then, we want to use the commit we have just made, and force push our tag to that commit
    - name: Get Commit ID
      id: get_commit_id
      run: |
        $head = git rev-parse HEAD
        echo $head
        echo "::set-output name=ID::$head"

    - name: Force create tag
      run: |
        git tag --force ${{ steps.get_tag_version.outputs.TAG }} ${{ steps.get_commit_id.outputs.ID }}

    - name: Create and push version specific branch
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git branch version-${{ steps.get_tag_version.outputs.TAG }}
        git push -u origin version-${{ steps.get_tag_version.outputs.TAG }} --force --tags

    - name: Build Package
      run: |
        ./build.ps1 -Release -DontInstallLocally -OnlyBuildPackage

    # - name: Upload To NuGet.org
    #   run: |
    #     nuget setApiKey ${{ secrets.NUGET_API_KEY }}
    #     nuget push ./ULTRAINTERFACE/Package/ULTRAINTERFACE.nupkg -Source https://api.nuget.org/v3/index.json

    - name: Build Mod
      run: |
        ./build.ps1 -Release -DontInstallLocally -OnlyBuildMod
        
    - name: Upload NuGet Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_upload_url.outputs.UPLOAD_URL }}
        asset_path: ./ULTRAINTERFACE/Package/ULTRAINTERFACE.nupkg
        asset_name: ULTRAINTERFACE-${{ steps.get_tag_version.outputs.VERSION }}.nupkg
        asset_content_type: application/octet-stream

    - name: Upload Example Mod
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_upload_url.outputs.UPLOAD_URL }}
        asset_path: ./ExampleUI/bin/Release/net471/win-x64/publish/${{ env.MOD_NAME }}.dll
        asset_name: ${{ env.MOD_NAME }}.dll
        asset_content_type: application/octet-stream